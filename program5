import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split


# Sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)




# Define the neural network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size

        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(self.input_size, self.hidden_size)
        self.bias_input_hidden = np.random.rand(1, self.hidden_size)
        self.weights_hidden_output = np.random.rand(self.hidden_size, self.output_size)
        self.bias_hidden_output = np.random.rand(1, self.output_size)

    def forward(self, inputs):
        # Forward propagation
        self.hidden_output = sigmoid(np.dot(inputs, self.weights_input_hidden) + self.bias_input_hidden)
        self.predicted_output = sigmoid(np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_hidden_output)
        return self.predicted_output

    def backward(self, inputs, expected_output, learning_rate):
        # Backpropagation

        # Calculate output layer error and delta
        output_error = expected_output - self.predicted_output
        output_delta = output_error * sigmoid_derivative(self.predicted_output)

        # Calculate hidden layer error and delta
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_output)

        # Update weights and biases using deltas
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * learning_rate
        self.bias_hidden_output += np.sum(output_delta) * learning_rate

        self.weights_input_hidden += inputs.T.dot(hidden_delta) * learning_rate
        self.bias_input_hidden += np.sum(hidden_delta) * learning_rate





# Load breast cancer dataset
data = load_breast_cancer()
X = data.data
y = data.target

# Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the neural network
np.random.seed(1)  # For reproducibility
input_size = X_train.shape[1]
hidden_size = 4
output_size = 1
learning_rate = 0.1

# Create the neural network
nn = NeuralNetwork(input_size, hidden_size, output_size)

# Train the neural network
for epoch in range(10000):
    nn.forward(X_train)
    nn.backward(X_train, y_train.reshape(-1, 1), learning_rate)

# Test the trained network
predicted_output = nn.forward(X_test)
predicted_output = np.where(predicted_output >= 0.5, 1, 0)  # Thresholding for binary classification
accuracy = np.mean(predicted_output == y_test.reshape(-1, 1))
print(f"Accuracy: {accuracy * 100:.2f}%")
