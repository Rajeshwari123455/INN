import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split


def sigmoid(x):
  return 1/(1+np.exp(-x))
def sigmoid_derivative(x):
  return x*(1-x)


def relu(x):
  return np.max(0,x)


##define the neural network class
class NeuralNetwork:
  def __init__(self,input_size,hidden_size,output_size):
    self.input_size=input_size
    self.hidden_size=hidden_size
    self.output_size=output_size

    #initialize weights and biases
    self.weights_input_hidden=np.random.rand(self.input_size,self.hidden_size)
    self.bias_input_hidden=np.random.rand(1,self.hidden_size)
    self.weights_hidden_output=np.random.rand(self.hidden_size,self.output_size)
    self.bias_hidden_output=np.random.rand(1,self.output_size)


  def forward(self,inputs):
    #Forward propogation
    self.hidden_output=sigmoid(np.dot(inputs,self.weights_input_hidden)+self.bias_input_hidden)
    self.predicted_output=sigmoid(np.dot(self.hidden_output,self.weights_hidden_output)+self.bias_hidden_output)
    return self.predicted_output


#load breast cancer data
data=load_breast_cancer()
X = data.data
y = data.target


x



y


scaler=StandardScaler()
X=scaler.fit_transform(X)


X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)



input_size=X_train.shape[1]
hidden_size=2
output_size=1



#create neural network
nn=NeuralNetwork(input_size,hidden_size,output_size)


#Train the neural network
for epoch in range(100):
  nn.forward(X_train)


#test the trained network
predicted_output=nn.forward(X_test)
predicted_output=np.where(predicted_output>=0.5,1,0) #tresholding for binary classification
accuracy=np.mean(predicted_output==y_test.reshape(-1,1))
print(f"Accuracy:{accuracy * 100:.2f}%")


