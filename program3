from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np



iris=datasets.load_iris()
x=iris.data
y=iris.target


x


y


##considering only two classes
x=x[y!=2]
y=y[y!=2]



##selecting 50 instances of each class
class_0_indeces=np.where(y==0)[0][:50]
class_1_indeces=np.where(y==1)[0][:50]




import matplotlib.pyplot as plt
plt.scatter(x[y==0][:,0],x[y==0][:,1],label='class0',marker='o')
plt.scatter(x[y==1][:,0],x[y==1][:,1],label='class1',marker='*')
plt.xlabel('sepel length')
plt.ylabel('petel length')
plt.title('iris dataset')
plt.show()


x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)



scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)




x_train


x_test



class Perceptron:
    def __init__(self, num_features, learning_rate=0.1, epochs=100):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = np.zeros(num_features + 1)

    def activation(self, x):
        return 1 if x >= 0 else 0

    def predict(self, inputs):
        summation = np.dot(inputs, self.weights[1:]) + self.weights[0]
        return self.activation(summation)

    def train(self, training_inputs, labels):
        for _ in range(self.epochs):
            for inputs, label in zip(training_inputs, labels):
                prediction = self.predict(inputs)
                error = label - prediction
                self.weights[1:] += self.learning_rate * error * inputs
                self.weights[0] += self.learning_rate * error * 1

# Training the perceptron
num_features = x_train.shape[1]
perceptron = Perceptron(num_features=num_features)
perceptron.train(x_train, y_train)

correct = 0
for i in range(len(x_test)):
    prediction = perceptron.predict(x_test[i])
    if prediction == y_test[i]:
        correct += 1

accuracy = correct / len(x_test)
print(f"Accuracy: {accuracy * 100:.2f}%")



import matplotlib.pyplot as plt
plt.scatter(x[y == 0, 0], x[y == 0, 1], label='Class 0', marker='o')
plt.scatter(x[y == 1, 0], x[y == 1, 1], label='Class 1', marker='x')
plt.xlabel("Sepal length")
plt.ylabel("petal length")
plt.show()
